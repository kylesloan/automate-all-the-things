---
# This play will
#  setup a k8 cluster in GCP
#  build a golang binary
#  config and deploy a container that will return the current time from golang

# it requires
#  configuring gcloud
#  creating a gcp project
#  enabling k8 creation for the project
#  creating an iam service acccount and configuring the key

- hosts: localhost

  vars_files:
    - vars.yml


  vars_prompt:

  - name: have_read_readme
    prompt: Did you follow the steps to setup GCP, k8 enabled and create a service account as found in the README under "Steps to get started"?
    default: "yes"
    private: no
    tags: prompt

  - name: have_dockerhub_account
    prompt: Do you have a Docker Hub account and are logged in with "docker login" on the cli?
    default: "yes"
    private: no
    tags: prompt

  - name: docker_hub_name
    prompt: What is your docker hub name? Determine this by going to https://hub.docker.com and it will be in the top right corner
    private: no
    tags: prompt


  tasks:

  - name: try to locate GCP creds file
    changed_when: false
    register: gcp_creds
    shell: "echo $GOOGLE_APPLICATION_CREDENTIALS"

  - name: verify a GCP login file exists, if not please go to https://cloud.google.com/docs/authentication/getting-started#creating_a_service_account and follow directions, more info in README of this project
    fail:
      msg: please go to https://cloud.google.com/docs/authentication/getting-started#creating_a_service_account
    when: gcp_creds.stdout|length == 0

  - name: verify answer for have_dockerhub_account
    fail:
      msg: Please go to https://hub.docker.com and create one, and then run "docker login" on the cli.
    when: have_dockerhub_account != "yes"

  - name: verify answer for docker_hub_name
    fail:
      msg: Please go to https://hub.docker.com to determine your username.
    when: docker_hub_name|length < 3

  - name: verify answer for read the readme
    fail:
      msg: Please ensure all steps from the "Steps to get started" of the README are completed before continuing with this script.
    when: have_read_readme != "yes"

  # to get this far, git and ansible have to already been installed so the shell wrapper needs to have the checks there, not here
  - name: Check for prerequisites on cli $PATH. If a failure, please see the README.md Prerequisites area or try a brew/yum/apt-get install
    changed_when: false
    command: which {{ item.name }}
    loop:
      - { name: 'docker' }
      - { name: 'gcloud' }
      - { name: 'go' }
      - { name: 'kubectl' }
      - { name: 'terraform' }
  # TODO ansible_failed_result - https://docs.ansible.com/ansible/latest/user_guide/playbooks_blocks.html, can we tell the user the exact item that failed?

  - name: create custom terraform file based on project name
    template:
      src: templates/terraform/{{ item.file }}.tf.j2
      dest: ../terraform/{{ item.file }}.tf
    delegate_to: localhost
    with_items:
      - { file: 'main' }
    tags: terraform

  # http://www.mydailytutorials.com/working-date-timestamp-ansible/
  # tell user the time as the next command can take a long while
  - name: the time is now
    debug:
      var=ansible_date_time.time

  - name: "run terraform to setup GCP k8 cluster, THIS COMMAND TAKES UP TO 10 MINUTES. If this fails please ensure that you enabled the Kubernetes Engine for this project: https://console.cloud.google.com/kubernetes/list and wait until GCP says it is ready in the GUI AND have ran the steps to create a new service account with Owner privileges https://cloud.google.com/docs/authentication/getting-started#creating_a_service_account and create the key"
    terraform:
      project_path: '../terraform/'
      state: present
      force_init: yes
    tags: slow

  # no built in ansible modules for golang, didn't check for quality of galaxy
  # TODO this is not idempodent, what is the cleanest thing we can do here, md5sum check?
  - name: build golang binary for linux amd64
    changed_when: false
    command: env GOOS=linux GOARCH=amd64 go build -o ../code/code.bin ../code/main.go

  - name: build docker image, if this fails please ensure you are logged in with "docker login"
    docker_image:
      build:
        path: ../code/
        pull: yes
      name: "{{ docker_hub_name}}/{{ project_name }}"
      tag: latest
      push: yes
      source: build
    tags: docker

  # TODO is there ansible gcloud module?
  # how can we get this if terraform made everything for us?
  - name: load new cluster into profile
    command: "gcloud --project {{ project_name }} container clusters get-credentials {{ project_name }} --region {{ project_location }}"
    changed_when: false

  - name: create custom deployment.yml for k8 with docker hub account and name of project
    template:
      src=templates/k8/{{ item.file }}.yml.j2
      dest=../k8/{{ item.file }}.yml
    delegate_to: localhost
    with_items:
      - { file: 'deploy' }
      - { file: 'service' }
      - { file: 'ingress' }

  # TODO pip install openshift
  # this seems to be a bug, even after installing and running a command: pip list, i can see openshift is installed and ansible is using it
  # so go with regular command at this point
  - name: run kubenetes deployment yamls
    changed_when: false
    command: kubectl apply -f ../k8/{{ item.file }}.yml
    with_items:
      - { file: 'deploy' }
      - { file: 'service' }
      - { file: 'ingress' }

  - name: the time is now
    debug:
      var=ansible_date_time.time

  - name: see if the ingress load balancer exists from a previous run and already has an IP
    changed_when: false
    register: r
    raw: "kubectl get ingress {{ project_name }} --output jsonpath='{.status.loadBalancer.ingress[0].ip}'"
    tags: [goss]

  # ideally this should poll instead of flat sleeping
  # seems like goss might be able to do this, but we would need to inject kube config in to reach the cluster
  - name: sleep for a bit and try to get the GCP public IP for the new load balancer, this process takes a long time, even after the IP is allocated, it takes another few minutes to reach the cluster, SLEEP 3 MINS
    when: r.stdout == ""
    changed_when: false
    register: r2
    raw: "sleep 180; kubectl get ingress {{ project_name }} --output jsonpath='{.status.loadBalancer.ingress[0].ip}'"
    tags: [slow,goss]

  - name: assign the public ip to a variable
    changed_when: false
    register: ingress_ip
    command: "echo {% if r2.stdout is defined %}{{ r2.stdout }}{% else %}{{ r.stdout }}{% endif %}"
    tags: [goss]

  - name: "GCP load balancer creation can take up to 15 minutes to add the IP address and properly sync with the k8 cluster, here is the command that should end up working.  You might want to login to GCP console and go to Kube Engine: Services & Ingress to monitor how the load balancer is progressing.  Some backend services are in UNKNOWN state is not uncommon and will take some time to start working"
    debug: msg="curl -iL http://{% if r2.stdout is defined %}{{ r2.stdout }}{% else %}{{ r.stdout }}{% endif %}/"

  - name: Debug directions while you wait for GCP to finish the Ingress Load balancer setup, launch another container into the cluster and curl the service
    debug: msg="kubectl run -i --tty ubuntu --image=ubuntu:16.04 --restart=Never -- bash -il"

  - name: Install curl
    debug: msg="apt update && apt install -y curl iputils-ping host"

  - name: curl the service internally
    debug: msg="curl -iL {{ project_name }}:8081"

  - name: create goss file with http checks
    template:
      src: templates/goss/{{ item.file }}.yaml.j2
      dest: ../goss/{{ item.file }}.yaml
    delegate_to: localhost
    with_items:
      - { file: 'goss' }
    tags: goss

  # force_source required to rebuild the image, else it just keeps the old image
  - name: build the goss container
    docker_image:
      build:
        path: ../goss/
        pull: yes
      name: "{{ project_name }}-goss"
      tag: latest
      push: no
      source: build
      force_source: yes
    tags: [docker,goss]

  - name: write goss container name out so magefile can use it later
    copy:
     content: "{{ project_name }}-goss"
     dest: ../goss/container_name.txt
    tags: [goss]

  # detach argument is important else this is "successful" as it just goes into daemon mode
  # https://docs.ansible.com/ansible/latest/modules/docker_container_module.html
  - name: run goss check to see when gcp has configured the load balancer
    register: goss
    docker_container:
      detach: no
      name: "{{ project_name }}-goss"
      image: "{{ project_name }}-goss"
    tags: [docker,goss]
